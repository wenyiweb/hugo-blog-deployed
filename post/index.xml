<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Kevin Blog</title>
    <link>http://blog.h5super.com/post/</link>
    <description>Recent content in Posts on Kevin Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2015. All rights reserved.</copyright>
    <lastBuildDate>Wed, 23 Dec 2015 13:54:02 +0800</lastBuildDate>
    <atom:link href="http://blog.h5super.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>移动端适配解决方案之rem</title>
      <link>http://blog.h5super.com/2015/12/23/rem</link>
      <pubDate>Wed, 23 Dec 2015 13:54:02 +0800</pubDate>
      
      <guid>http://blog.h5super.com/2015/12/23/rem</guid>
      <description>

&lt;p&gt;REM是CSS3引入的一个新的单位。在W3C官网上是这样描述rem的——“font size of the root element” 。下面我们就一起来详细的了解rem。&lt;/p&gt;

&lt;h3 id=&#34;什么是rem:814cae6a22a02269994e2b6a8efce1c3&#34;&gt;什么是REM&lt;/h3&gt;

&lt;p&gt;rem（font size of the root element）是指相对于根元素的字体大小的单位。简单的说它就是一个相对单位。看到rem大家一定会想起em单位，em（font size of the element）是指相对于父元素的字体大小的单位。它们之间其实很相似，只不过一个计算的规则是依赖根元素一个是依赖父元素计算。&lt;/p&gt;

&lt;h3 id=&#34;为什么用在移动端:814cae6a22a02269994e2b6a8efce1c3&#34;&gt;为什么用在移动端&lt;/h3&gt;

&lt;p&gt;出于兼容性的考虑，在pc端由于各个浏览器厂商对rem支持的错综复杂，有些还不支持，比如早起的ie6,ie7,ie8;但是在移动端就不存在兼容性问题了，可以放心大胆的使用。&lt;/p&gt;

&lt;p&gt;###怎么使用
1.在head中加入下面这段js&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;!(function(doc, win) {
    var docEle = doc.documentElement,
        evt = &amp;quot;onorientationchange&amp;quot; in window ? &amp;quot;orientationchange&amp;quot; : &amp;quot;resize&amp;quot;,
        fn = function() {
            var width = docEle.clientWidth;
            if(!width) return;
            if(width&amp;gt;=640){
                docEle.style.fontSize = 20 * (640 / 320) + &amp;quot;px&amp;quot;;
            }else{
                docEle.style.fontSize = 20 * (width / 320) + &amp;quot;px&amp;quot;;
            }
        };
     
    win.addEventListener(evt, fn, false);
    doc.addEventListener(&amp;quot;DOMContentLoaded&amp;quot;, fn, false);
 
}(document, window));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.css写法：
设计稿中元素的宽高除(20 * (640 / 320)),单位用rem表示。&lt;/p&gt;

&lt;p&gt;3.显示效果&lt;/p&gt;

&lt;p&gt;iphone4：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xoasa.com1.z0.glb.clouddn.com/i4.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;iphone6：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xoasa.com1.z0.glb.clouddn.com/i6.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;iphone6s：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xoasa.com1.z0.glb.clouddn.com/i6p.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;安卓：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xoasa.com1.z0.glb.clouddn.com/ad.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo搭建个人博客部署Github和gitcafe教程</title>
      <link>http://blog.h5super.com/2015/11/12/hugopublish</link>
      <pubDate>Thu, 12 Nov 2015 17:09:44 +0800</pubDate>
      
      <guid>http://blog.h5super.com/2015/11/12/hugopublish</guid>
      <description>

&lt;p&gt;由于github拒绝Baiduspider，所以你的博客只能通过google搜索到，但是为了让不能使用google的但是又渴望学习的同学们也能看到你的博客，所以介绍一下gitcafe的部署，官方的文档写的很清楚&lt;a href=&#34;https://help.gitcafe.com/manuals/help/&#34;&gt;[官方文档]&lt;/a&gt;。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GitCafe将以代码托管为核心业务，提供一系列优质前沿的服务来帮助到中国IT领域的开发者、项目以及企业更好地学习与成长。&lt;/p&gt;

&lt;p&gt;Git是目前世界上最流行最优秀的项目版本控制系统之一，Cafe的意思为咖啡馆，象征着程序员文化。在GitCafe这个平台上，开发者可以轻松的在线协作共同开发出一个又一个开源或者私有项目。通过GitCafe，开发项目的控制与团队管理将变得方便与有效。&lt;/p&gt;

&lt;p&gt;在GitCafe的网站以及团队，我希望每一个用户和员工都能感受到浓厚纯正的黑客精神与文化，发现和理解计算机技术的真正魅力与潜力，激励每一位中国的开发者去开发出更多更有趣的东西。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;安装-git:db839055729571645c8cfcdc34673612&#34;&gt;安装 GIT&lt;/h3&gt;

&lt;p&gt;Windows 平台&lt;/p&gt;

&lt;p&gt;下载 &lt;a href=&#34;https://msysgit.github.io/&#34;&gt;msysGit&lt;/a&gt; 进行安装。安装完成后可以在应用程序界面找到 Git Bash 和 Git GUI 两个软件；其中，Git Bash 是一个 Bash 的模拟环境，让 Windows 用户可以像 Linux / Unix 环境一样使用 Git 命令； Git GUI 是一个图形界面的 Git 管理工具，提供了很好的可视化 git diff差异比较。我们推荐从 Git Bash 入手学习 Git 的使用。
&lt;img src=&#34;https://gitcafe-image.b0.upaiyun.com/423be76eeecff1b3cf0d7e83687bfb25.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Mac OS X 平台&lt;/p&gt;

&lt;p&gt;下载 &lt;a href=&#34;https://github.com/timcharper/git_osx_installer/downloads&#34;&gt;Mac OS X 版本的 Git 安装包&lt;/a&gt;进行安装 。
&amp;gt; 你可能会遇到这样的提示 xcode-select: note: no develper tools were found &amp;hellip; ，这说明你的 Mac 上 还没有安装 command line developer tools ，可以按照命令行的提示进行安装，或直接在命令行中输入 xcode-select &amp;ndash;install 回车后进行安装。&lt;/p&gt;

&lt;p&gt;如果你的 Mac 之前安装了 homebrew ，可以直接输入 brew install git 进行安装。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Linux 平台&lt;/p&gt;

&lt;p&gt;多数 Linux 发行版已经预编译 Git 的二进制包，可以通过包管理器直接安装。根据你使用的发行版，选择下面对应的命令进行安装。&lt;/p&gt;

&lt;p&gt;Debian/Ubuntu apt-get install git
&amp;gt; 如果你使用 Ubuntu 10.04、Debian 5.0（lenny）或更老的版本，请使用 apt-get install git-core命令进行安装。在老版本的 Debian 中，软件包 git 实际上是 GNU Interactive Tools ，而非我们熟知的版本控制系统。但由于 Git 的影响力越来越大，现在已经将 GNU Interactive Tools 改为 gnuit，git-core 正式改为 git。&lt;/p&gt;

&lt;p&gt;Fedora / CentOS yum install git
Gentoo emerge &amp;ndash;ask &amp;ndash;verbose dev-vcs/git
Arch Linux pacman -S git&lt;/p&gt;

&lt;h3 id=&#34;gitcafe-部署:db839055729571645c8cfcdc34673612&#34;&gt;Gitcafe 部署&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;创建SSH密钥：&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir ~/.ssh
$ cd  ~/.ssh
$ ssh-keygen -t rsa -C &amp;quot;YOUR_EMAIL@YOUREMAIL.COM&amp;quot;
Generating public/private rsa key pair.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in ~/.ssh/id_rsa.
Your public key has been saved in ~/.ssh/id_rsa.pub.
The key fingerprint is:
15:81:d2:7a:c6:6c:0f:ec:b0:b6:d4:18:b8:d1:41:48 YOUR_EMAIL@YOUREMAIL.COM
$ cat id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后再Gitcafe中点击账户设置，新建SSH KEY，粘贴刚才打印的key&lt;/p&gt;

&lt;p&gt;测试是否连接成功&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ssh -T git@gitcafe.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;按照提示输入yes。最后，如果出现这个提示&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Hi USERNAME! You&#39;ve successfully authenticated, but GitCafe does not provide shell access.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;恭喜你，连接成功。
2. 提交项目&lt;/p&gt;

&lt;p&gt;在Gitcafe上新建一个项目，例如，项目名为myblog。
hugo教程请参考&lt;a href=&#34;http://blog.h5super.com/2015/11/10/hugoblog/&#34;&gt;Hugo+Github搭建个人博客图文教程&lt;/a&gt;
本教程使用上一篇文章中创建的myblog。进入public目录，然后执行以下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd  ~/.ssh
$ ssh-keygen -t dsb -C &amp;quot;YOUR_EMAIL@YOUREMAIL.COM&amp;quot;
Generating public/private rsa key pair.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
The key fingerprint is:
$ cat id_dsb.pub
# 到 Github 网站个人设置项里添加 SSH 公钥，随后测试是否能连接到 Github
# 在 Github 网站新建 username.github.io 项目
# cd 进入本地项目文件夹
$ git remote add ghorigin git@github.com:username/username.github.io.git #添加远程仓库地址，ghorigin 指代 Github 远程仓库，区别于 Gitcafe 仓库的 origin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后打开gitcafe刚才创建的项目，点击继续按钮，将会看到push的所有文件。&lt;/p&gt;

&lt;h3 id=&#34;github-部署:db839055729571645c8cfcdc34673612&#34;&gt;GitHub 部署&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;创建SSH密钥：&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;方法个上面已经介绍过了，由于刚才创建的名字是id_rsa.pub已经被Gitcafe占用，这里用rds命名。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;提交项目&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Github部署，请参考&lt;a href=&#34;http://blog.h5super.com/2015/11/10/hugoblog/&#34;&gt;Hugo+Github搭建个人博客图文教程&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;域名解析:db839055729571645c8cfcdc34673612&#34;&gt;域名解析&lt;/h3&gt;

&lt;p&gt;如果你使用个性域名，请参考该方法将域名同时只想Github和Gitcafe，使国内和国外用户自动访问gitcafe和github。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;asset/20151112.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>myPlan</title>
      <link>http://blog.h5super.com/2015/11/12/plan</link>
      <pubDate>Thu, 12 Nov 2015 13:54:02 +0800</pubDate>
      
      <guid>http://blog.h5super.com/2015/11/12/plan</guid>
      <description>

&lt;p&gt;博客搭建告一段落，github和gitcafe都可以使用，还剩下一个自动化部署的功能需要添加。
其实是一直想搭建一个自己的博客，看了hugo,jekyll,hexo等等,最后选择了hugo来实现，个人觉得hugo还是很简单的，只要会基本的
markdown语法&lt;a href=&#34;https://gitcafe.com/GitCafe/Help/wiki/Markdown-%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5%E8%A1%A8#wiki&#34;&gt;[学习手册]&lt;/a&gt;，git的一些基本知识就可以了。&lt;/p&gt;

&lt;h3 id=&#34;plan:67d417517df837737f56d399ab3d0cfe&#34;&gt;plan&lt;/h3&gt;

&lt;p&gt;第一件事是系统的学习一下nodejs，做一个项目完结[计划一个半月时间]。
计划不能太多，先一个一个实现。goodluck!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo&#43;Github搭建个人博客图文教程</title>
      <link>http://blog.h5super.com/2015/11/10/hugoblog</link>
      <pubDate>Tue, 10 Nov 2015 16:07:41 +0800</pubDate>
      
      <guid>http://blog.h5super.com/2015/11/10/hugoblog</guid>
      <description>

&lt;h3 id=&#34;什么是hugo:626830d4aaa11ec5f6cd4b088f8e8a8e&#34;&gt;什么是Hugo?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Hugo is a general-purpose website framework. Technically speaking, Hugo is a static site generator.
简单说就是一个静态网站、个人博客工具，和其他博客工具jekyll相比，hugo不需要安装，仅需要一个二进制文件hugo(hugo.exe)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;静态网站生成器:626830d4aaa11ec5f6cd4b088f8e8a8e&#34;&gt;静态网站生成器&lt;/h3&gt;

&lt;p&gt;静态网站与动态网站最大的不同是不需要调用数据库生成页面，再返回给用户，而是在访问时直接返回现成的静态页面。
采用静态页面最大的好处就是访问速度快，不需要每次都重新生成页面。博客文章可以在本地以文本的方式维护，不需要使用数据库保存这些文本。&lt;/p&gt;

&lt;p&gt;我的Hugo博客：&lt;a href=&#34;http://blog.h5super.com/&#34;&gt;http://blog.h5super.com/&lt;/a&gt;  ~~刚刚搭建完成，继续完善中&lt;/p&gt;

&lt;h3 id=&#34;github-pages:626830d4aaa11ec5f6cd4b088f8e8a8e&#34;&gt;GitHub Pages&lt;/h3&gt;

&lt;p&gt;可以直接把网站托管到GitHub Pages。你只需要在GitHub上创建一个项目，然后将生成出来的静态页面文件(public目录下)push到这个项目的gh-pages分支，保证根目录有一个index.html文件即可。这样，一个免费、无限流量的博客系统就搭建完成了。同时，通过github你可以方便对博客文章进行管理和追踪。这样既不会丢失，也能追溯到每一次的内容变化。&lt;/p&gt;

&lt;h3 id=&#34;hugo:626830d4aaa11ec5f6cd4b088f8e8a8e&#34;&gt;Hugo&lt;/h3&gt;

&lt;p&gt;Hugo是什么？它主要做了什么？&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Hugo只有一个二进制文件（比如Windows里只是一个hugo.exe，我是在windows下面使用的）&lt;/li&gt;
&lt;li&gt;Hugo可以将你写好的MarkDown格式的文章自动转换为静态的网页。&lt;/li&gt;
&lt;li&gt;Hugo内置web服务器，可以方便的用于本地调试。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;hello-hugo:626830d4aaa11ec5f6cd4b088f8e8a8e&#34;&gt;Hello Hugo&lt;/h3&gt;

&lt;p&gt;Hugo官方主页：&lt;a href=&#34;https://gohugo.io/&#34;&gt;https://gohugo.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hugo二进制下载地址：&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;https://github.com/spf13/hugo/releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载下来后，只有一个叫hugo或者hugo.exe的程序。
开始生成自己的站点：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo.exe new site myblog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后进入myblog目录下:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd myblog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会看到这样一个目录结构：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  ▸ archetypes/
  ▸ content/
  ▸ layouts/
  ▸ static/
    config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这几个文件夹的作用分别是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;archetypes：包括内容类型，在创建新内容时自动生成内容的配置&lt;/li&gt;
&lt;li&gt;content：包括网站内容，全部使用markdown格式&lt;/li&gt;
&lt;li&gt;layouts：包括了网站的模版&lt;/li&gt;
&lt;li&gt;static：包括了css, js, fonts, media等资源文件&lt;/li&gt;
&lt;li&gt;config.toml：是网站的配置文件，这是一个TOML文件，全称是Tom&amp;rsquo;s Obvious, Minimal Language。如果你不喜欢这种格式，你可以将config.toml替换为YAML格式的config.yaml，或者json格式的config.json。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;创建一个页面：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo.exe new about.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果是博客日志，最好将md文件放在content的post目录里。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo.exe new post/firstpage.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行完后，会在content/post目录自动生成一个MarkDown格式的firstpage.md文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2015-11-10T17:02:16+08:00&amp;quot;
draft = true
title = &amp;quot;firstpage&amp;quot;

+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;+++可以替换为Jekyll一样的---，里面的内容是这篇文章的一些信息。下面就可以开始写你的文章内容，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2015-11-10T17:02:16+08:00&amp;quot;
draft = true
title = &amp;quot;firstpage&amp;quot;

+++

### Hello Hugo

This is my first blog.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同样的方法，你也可以在about.md添加一些内容。然后执行命令&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo.exe server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;浏览器里打开：&lt;a href=&#34;http://127.0.0.1:1313,发现什么也没有，为什么呢？这是由于Hugo默认生成的网站没有任何theme,我们可以从github上下载其&#34;&gt;http://127.0.0.1:1313,发现什么也没有，为什么呢？这是由于Hugo默认生成的网站没有任何theme,我们可以从github上下载其&lt;/a&gt;
中一个模板,创建一个目录themes：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd themes
$ git clone https://github.com/spf13/hyde.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再次启动本地调试：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo.exe server --theme=hyde --buildDrafts --watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;浏览器里打开：&lt;a href=&#34;http://127.0.0.1:1313&#34;&gt;http://127.0.0.1:1313&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;ndash;watch或者-w 选项打开的话，将会监控到文章的改动从而自动去刷新浏览器，不需要自己手工去刷新浏览器，非常方便。&lt;/p&gt;

&lt;p&gt;更详细的文档请看：&lt;/p&gt;

&lt;p&gt;官方文档：&lt;a href=&#34;https://gohugo.io/overview/introduction/&#34;&gt;https://gohugo.io/overview/introduction/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;皮肤列表：&lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;https://github.com/spf13/hugoThemes&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;添加评论功能:626830d4aaa11ec5f6cd4b088f8e8a8e&#34;&gt;添加评论功能&lt;/h3&gt;

&lt;p&gt;我是采用多说评论插件，&lt;a href=&#34;http://www.duoshuo.com&#34;&gt;www.duoshuo.com&lt;/a&gt;，按照提示操作即可。&lt;/p&gt;

&lt;h3 id=&#34;github-部署:626830d4aaa11ec5f6cd4b088f8e8a8e&#34;&gt;Github 部署&lt;/h3&gt;

&lt;p&gt;在GitHub上创建一个Repository，命名为：&lt;code&gt;username.github.io&lt;/code&gt; （username替换为你的github用户名）。&lt;/p&gt;

&lt;p&gt;在站点根目录执行 &lt;code&gt;Hugo&lt;/code&gt; 命令生成最终页面：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$  hugo.exe server --theme=hyde --buildDrafts --watch  -b &amp;quot;http://username.github.io&amp;quot; --appendPort=false
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd public
$ git init
$ git remote add origin https://github.com/username/username.github.io.git
$ git add -A
$ git commit -m &amp;quot;first commit&amp;quot;
$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果一切顺利，所有静态页面都会生成到 &lt;code&gt;public&lt;/code&gt; 目录，将pubilc目录里所有文件 &lt;code&gt;push&lt;/code&gt; 到刚创建的Repository的 &lt;code&gt;master&lt;/code&gt; 分支。
如果提交过程中有问题，请参照这篇文章&lt;a href=&#34;http://my.oschina.net/juwenz/blog/153350&#34;&gt;my.oschina.net/juwenz/blog/153350&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考文章：
  &lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;HugoQuickstart Guide&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>